{"version":3,"file":"simple-btn.umd.js","sources":["simple-btn.umd.js"],"sourcesContent":["/**\n * Copyright 2019\n * @license MIT, see License.md for full text.\n */\n\n/**\n * `simple-btn`\n * `Basic button component`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @customElement\n * @demo demo/index.html\n */\nclass SimpleBtn extends HTMLElement {\n  \n  // render function\n  get html() {\n    return `\n<style>\n\n\n:host {\n  display: inline;\n  cursor: pointer;\n  padding: 1em;\n  background: #004544;\n  color: #9fd5b3;\n  transform: 1s ease; }\n\n:host(:hover) {\n  background: #9fd5b3;\n  color: #004544;\n  transform: 1s ease; }\n\n:host([color=\"color-2\"]) {\n  background: #9fd5b3;\n  color: #004544;\n  transform: 1s ease; }\n\n:host(:hover[color=\"color-2\"]) {\n  background: #004544;\n  color: #9fd5b3;\n  transform: 1s ease; }\n\n:host([hidden]) {\n  display: none; }\n</style>\n<slot></slot>`;\n  }\n\n  // properties available to the custom element for data binding\n  static get properties() {\n    return {\n  \"clicked\": {\n    \"name\": \"clicked\",\n    \"type\": \"Boolean\",\n    \"value\": false,\n    \"reflectToAttribute\": false,\n    \"observer\": \"_clickedChanged\"\n  },\n  \"color\": {\n    \"name\": \"color\",\n    \"type\": \"String\",\n    \"value\": \"color-1\",\n    \"reflectToAttribute\": false,\n    \"observer\": \"_colorChanged\"\n  }\n}\n;\n  }\n\n  /**\n   * Store the tag name to make it easier to obtain directly.\n   * @notice function name must be here for tooling to operate correctly\n   */\n  static get tag() {\n    return \"simple-btn\";\n  }\n  /**\n   * life cycle\n   */\n  constructor(delayRender = false) {\n    super();\n\n    // set tag for later use\n    this.tag = SimpleBtn.tag;\n    // map our imported properties json to real props on the element\n    // @notice static getter of properties is built via tooling\n    // to edit modify src/simple-btn-properties.json\n    let obj = SimpleBtn.properties;\n    for (let p in obj) {\n      if (obj.hasOwnProperty(p)) {\n        if (this.hasAttribute(p)) {\n          this[p] = this.getAttribute(p);\n        } else {\n          this.setAttribute(p, obj[p].value);\n          this[p] = obj[p].value;\n        }\n      }\n    }\n    // optional queue for future use\n    this._queue = [];\n    this.template = document.createElement(\"template\");\n\n    this.attachShadow({ mode: \"open\" });\n\n    if (!delayRender) {\n      this.render();\n    }\n  }\n  /**\n   * life cycle, element is afixed to the DOM\n   */\n  connectedCallback() {\n    if (window.ShadyCSS) {\n      window.ShadyCSS.styleElement(this);\n    }\n\n    if (this._queue.length) {\n      this._processQueue();\n    }\n  }\n\n  _copyAttribute(name, to) {\n    const recipients = this.shadowRoot.querySelectorAll(to);\n    const value = this.getAttribute(name);\n    const fname = value == null ? \"removeAttribute\" : \"setAttribute\";\n    for (const node of recipients) {\n      node[fname](name, value);\n    }\n  }\n\n  _queueAction(action) {\n    this._queue.push(action);\n  }\n\n  _processQueue() {\n    this._queue.forEach(action => {\n      this[`_${action.type}`](action.data);\n    });\n\n    this._queue = [];\n  }\n\n  _setProperty({ name, value }) {\n    this[name] = value;\n  }\n\n  render() {\n    this.shadowRoot.innerHTML = null;\n    this.template.innerHTML = this.html;\n\n    if (window.ShadyCSS) {\n      window.ShadyCSS.prepareTemplate(this.template, this.tag);\n    }\n    this.shadowRoot.appendChild(this.template.content.cloneNode(true));\n  }\n\n  //static get observedAttributes() {\n  //  return [];\n  //}\n  // disconnectedCallback() {}\n  // attributeChangedCallback(attr, oldValue, newValue) {}\n  // Observer clicked for changes\n  _clickedChanged(newValue, oldValue) {\n    if (typeof newValue !== typeof undefined) {\n      console.log(newValue);\n    }\n  }\n  _colorChanged(newValue, oldValue) {\n    if (typeof newValue !== typeof undefined) {\n      console.log(newValue);\n    }\n  }\n}\nwindow.customElements.define(SimpleBtn.tag, SimpleBtn);\nexport { SimpleBtn };\n"],"names":["SimpleBtn","delayRender","tag","obj","properties","p","hasOwnProperty","_this","hasAttribute","getAttribute","setAttribute","value","_queue","template","document","createElement","attachShadow","mode","render","HTMLElement","window","ShadyCSS","styleElement","this","length","_processQueue","name","to","recipients","shadowRoot","querySelectorAll","fname","action","push","forEach","_this2","type","data","innerHTML","html","prepareTemplate","appendChild","content","cloneNode","newValue","oldValue","_typeof","console","log","customElements","define"],"mappings":"+8DAeMA,iCAoEQC,4LAILC,IAAMF,EAAUE,QAIjBC,EAAMH,EAAUI,eACf,IAAIC,KAAKF,EACRA,EAAIG,eAAeD,KACjBE,EAAKC,aAAaH,KACfA,GAAKE,EAAKE,aAAaJ,MAEvBK,aAAaL,EAAGF,EAAIE,GAAGM,SACvBN,GAAKF,EAAIE,GAAGM,iBAKlBC,OAAS,KACTC,SAAWC,SAASC,cAAc,cAElCC,aAAa,CAAEC,KAAM,SAErBhB,KACEiB,yPA9FaC,wlBAuCb,SACE,MACD,eACA,iBACC,sBACa,WACV,yBAEL,MACC,aACA,eACC,8BACa,WACV,oDAWL,gEAsCHC,OAAOC,UACTD,OAAOC,SAASC,aAAaC,MAG3BA,KAAKX,OAAOY,aACTC,uDAIMC,EAAMC,OACbC,EAAaL,KAAKM,WAAWC,iBAAiBH,GAC9ChB,EAAQY,KAAKd,aAAaiB,GAC1BK,EAAiB,MAATpB,EAAgB,kBAAoB,kDAC/BiB,iDAAY,SACxBG,GAAOL,EAAMf,4HAITqB,QACNpB,OAAOqB,KAAKD,2DAIZpB,OAAOsB,QAAQ,SAAAF,GAClBG,aAASH,EAAOI,OAAQJ,EAAOK,aAG5BzB,OAAS,+CAGDc,IAAAA,KAAMf,IAAAA,WACde,GAAQf,wCAIRkB,WAAWS,UAAY,UACvBzB,SAASyB,UAAYf,KAAKgB,KAE3BnB,OAAOC,UACTD,OAAOC,SAASmB,gBAAgBjB,KAAKV,SAAUU,KAAKrB,UAEjD2B,WAAWY,YAAYlB,KAAKV,SAAS6B,QAAQC,WAAU,4CAS9CC,EAAUC,iBACpBC,EAAOF,IACTG,QAAQC,IAAIJ,yCAGFA,EAAUC,iBAClBC,EAAOF,IACTG,QAAQC,IAAIJ,YAIlBxB,OAAO6B,eAAeC,OAAOlD,EAAUE,IAAKF"}